// Generated by Dagger (https://google.github.io/dagger).
package com.example.ian.weatherapp.detailPage;

import com.example.ian.weatherapp.Activities.WeatherDetailActivity;
import com.example.ian.weatherapp.Activities.WeatherDetailActivity_MembersInjector;
import com.example.ian.weatherapp.WeatherApplicationComponent;
import dagger.internal.Preconditions;

public final class DaggerDetailActivityComponent implements DetailActivityComponent {
  private WeatherApplicationComponent weatherApplicationComponent;

  private DaggerDetailActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.weatherApplicationComponent = builder.weatherApplicationComponent;
  }

  @Override
  public void injectDetailActivity(WeatherDetailActivity weatherDetailActivity) {
    injectWeatherDetailActivity(weatherDetailActivity);
  }

  private WeatherDetailActivity injectWeatherDetailActivity(WeatherDetailActivity instance) {
    WeatherDetailActivity_MembersInjector.injectWeatherService(
        instance,
        Preconditions.checkNotNull(
            weatherApplicationComponent.getWeatherService(),
            "Cannot return null from a non-@Nullable component method"));
    WeatherDetailActivity_MembersInjector.injectGson(
        instance,
        Preconditions.checkNotNull(
            weatherApplicationComponent.getGson(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private WeatherApplicationComponent weatherApplicationComponent;

    private Builder() {}

    public DetailActivityComponent build() {
      if (weatherApplicationComponent == null) {
        throw new IllegalStateException(
            WeatherApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerDetailActivityComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder detailActivityModule(DetailActivityModule detailActivityModule) {
      Preconditions.checkNotNull(detailActivityModule);
      return this;
    }

    public Builder weatherApplicationComponent(
        WeatherApplicationComponent weatherApplicationComponent) {
      this.weatherApplicationComponent = Preconditions.checkNotNull(weatherApplicationComponent);
      return this;
    }
  }
}
