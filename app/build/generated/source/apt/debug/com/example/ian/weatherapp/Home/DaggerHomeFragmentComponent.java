// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.ian.weatherapp.Home;

import com.example.ian.weatherapp.Fragments.MainScreenFragment;
import com.example.ian.weatherapp.Fragments.MainScreenFragment_MembersInjector;
import com.example.ian.weatherapp.WeatherApplicationComponent;
import com.example.ian.weatherapp.network.WeatherService;
import com.google.gson.Gson;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerHomeFragmentComponent implements HomeFragmentComponent {
  private Provider<WeatherService> getWeatherServiceProvider;

  private Provider<Gson> getGsonProvider;

  private MembersInjector<MainScreenFragment> mainScreenFragmentMembersInjector;

  private DaggerHomeFragmentComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getWeatherServiceProvider =
        new Factory<WeatherService>() {
          private final WeatherApplicationComponent weatherApplicationComponent =
              builder.weatherApplicationComponent;

          @Override
          public WeatherService get() {
            return Preconditions.checkNotNull(
                weatherApplicationComponent.getWeatherService(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.getGsonProvider =
        new Factory<Gson>() {
          private final WeatherApplicationComponent weatherApplicationComponent =
              builder.weatherApplicationComponent;

          @Override
          public Gson get() {
            return Preconditions.checkNotNull(
                weatherApplicationComponent.getGson(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.mainScreenFragmentMembersInjector =
        MainScreenFragment_MembersInjector.create(getWeatherServiceProvider, getGsonProvider);
  }

  @Override
  public void inject(MainScreenFragment mainScreenFragment) {
    mainScreenFragmentMembersInjector.injectMembers(mainScreenFragment);
  }

  public static final class Builder {
    private WeatherApplicationComponent weatherApplicationComponent;

    private Builder() {}

    public HomeFragmentComponent build() {
      if (weatherApplicationComponent == null) {
        throw new IllegalStateException(
            WeatherApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerHomeFragmentComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder homeFragmentModule(HomeFragmentModule homeFragmentModule) {
      Preconditions.checkNotNull(homeFragmentModule);
      return this;
    }

    public Builder weatherApplicationComponent(
        WeatherApplicationComponent weatherApplicationComponent) {
      this.weatherApplicationComponent = Preconditions.checkNotNull(weatherApplicationComponent);
      return this;
    }
  }
}
